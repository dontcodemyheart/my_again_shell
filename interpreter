import re

# Определяем токены
TOKEN_TYPES = [
    ('NUMBER', r'd+'),
    ('IDENTIFIER', r'[a-zA-Z_][a-zA-Z0-9_]*'),
    ('ASSIGN', r'='),
    ('PLUS', r'+'),
    ('MINUS', r'-'),
    ('MUL', r'*'),
    ('DIV', r'/'),
    ('LPAREN', r'('),
    ('RPAREN', r')'),
    ('IF', r'if'),
    ('THEN', r'then'),
    ('ELSE', r'else'),
    ('ENDIF', r'endif'),
    ('WHITESPACE', r's+'),  # Игнорируем пробелы
]

# Создаем регулярное выражение для токенов
token_regex = '|'.join(f'(?P<{name}>{pattern})' for name, pattern in TOKEN_TYPES)
token_pattern = re.compile(token_regex)

class Lexer:
    def __init__(self, text):
        self.text = text
        self.position = 0

    def tokenize(self):
        tokens = []
        while self.position < len(self.text):
            match = token_pattern.match(self.text, self.position)
            if match:
                token_type = match.lastgroup
                if token_type == 'WHITESPACE':
                    pass  # Игнорируем пробелы
                else:
                    tokens.append((token_type, match.group()))
                self.position = match.end()
            else:
                raise Exception(f"Invalid character: {self.text[self.position]}")
        return tokens

class Interpreter:
    def __init__(self):
        self.variables = {}

    def evaluate_expression(self, tokens):
        # Простой парсер для арифметических выражений
        if len(tokens) == 1 and tokens[0][0] == 'NUMBER':
            return int(tokens[0][1])
        elif len(tokens) == 3:
            left = self.evaluate_expression([tokens[0]])
            operator = tokens[1][1]
            right = self.evaluate_expression([tokens[2]])
            if operator == '+':
                return left + right
            elif operator == '-':
                return left - right
            elif operator == '*':
                return left * right
            elif operator == '/':
                return left // right  # Целочисленное деление

    def parse_assignment(self, tokens):
        var_name = tokens[0][1]
        expr_tokens = tokens[2:]  # Пропускаем '='
        self.variables[var_name] = self.evaluate_expression(expr_tokens)

    def parse_conditional(self, tokens):
        condition_tokens = []
        then_statement = []
        else_statement = []
        
        # Получаем условие
        index = 1  # Пропускаем 'if'
        while tokens[index][0] != 'THEN':
            condition_tokens.append(tokens[index])
            index += 1
        
        # Получаем оператор после 'then'
        index += 1  # Пропускаем 'THEN'
        while index < len(tokens) and tokens[index][0] != 'ELSE' and tokens[index][0] != 'ENDIF':
            then_statement.append(tokens[index])
            index += 1
        
        # Если есть оператор 'else'
        if index < len(tokens) and tokens[index][0] == 'ELSE':
            index += 1  # Пропускаем 'ELSE'
            while index < len(tokens) and tokens[index][0] != 'ENDIF':
                else_statement.append(tokens[index])
                index += 1
        
        # Выполняем условие
        condition_result = self.evaluate_expression(condition_tokens)
        if condition_result:
            self.execute_statement(then_statement)
        else:
            self.execute_statement(else_statement)

    def execute_statement(self, tokens):
        if tokens[1][0] == 'ASSIGN':
            self.parse_assignment(tokens)
        elif tokens[0][0] == 'IF':
            self.parse_conditional(tokens)

    def run(self, program):
        lexer = Lexer(program)
        tokens = lexer.tokenize()
        
        # Обработка токенов
        index = 0
        while index < len(tokens):
            statement_tokens = []
            while index < len(tokens) and tokens[index][0] != 'ENDIF':
                statement_tokens.append(tokens[index])
                index += 1
            
            if statement_tokens:
                self.execute_statement(statement_tokens)
            
            # Пропускаем 'ENDIF'
            if index < len(tokens) and tokens[index][0] == 'ENDIF':
                index += 1

# Пример использования
if __name__ == "__main__":
    interpreter = Interpreter()
    program = """
    x = 5
    y = 10
    if x < y then
        z = x + y
    else
        z = y - x
    endif
    """
    interpreter.run(program)
    print("Variables:", interpreter.variables)
